apiVersion: v1
kind: Namespace
metadata:
  name: ignition
---
# PVC pour le Master
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ignition-master-storage
  namespace: ignition
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: local-path
---
# PVC pour le Backup
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ignition-backup-storage
  namespace: ignition
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: local-path
---
# Deployment Master Gateway
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ignition-master
  namespace: ignition
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ignition-master
  template:
    metadata:
      labels:
        app: ignition-master
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values: ["ignition-master", "ignition-backup"]
            topologyKey: kubernetes.io/hostname
      initContainers:
      - name: init-master-data
        image: inductiveautomation/ignition:latest
        command: ['sh', '-c']
        args:
          - |
            if [ ! -f /persistent-data/gateway.xml_clean ]; then
              echo "First run detected - copying Ignition system files for Master..."
              cp -r /usr/local/bin/ignition/data/* /persistent-data/
              echo "Master copy completed!"
            else
              echo "Master system files already present, skipping copy."
            fi
        volumeMounts:
        - name: master-data
          mountPath: /persistent-data
      containers:
      - name: ignition-master
        image: inductiveautomation/ignition:latest
        ports:
        - containerPort: 8088
          name: http
        - containerPort: 8043
          name: https
        - containerPort: 8060
          name: redundancy
        env:
        - name: GATEWAY_ADMIN_PASSWORD
          value: "password"
        - name: IGNITION_EDITION
          value: "standard"
        - name: TZ
          value: "Europe/Paris"
        - name: GATEWAY_REDUNDANCY_ENABLED
          value: "true"
        - name: GATEWAY_REDUNDANCY_ROLE
          value: "master"
        volumeMounts:
        - name: master-data
          mountPath: /usr/local/bin/ignition/data
        resources:
          requests:
            memory: "512Mi"
            cpu: "500"
          limits:
            memory: "1Gi"
            cpu: "600"
      volumes:
      - name: master-data
        persistentVolumeClaim:
          claimName: ignition-master-storage
---
# Deployment Backup Gateway
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ignition-backup
  namespace: ignition
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ignition-backup
  template:
    metadata:
      labels:
        app: ignition-backup
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values: ["ignition-master", "ignition-backup"]
            topologyKey: kubernetes.io/hostname
      initContainers:
      - name: init-backup-data
        image: inductiveautomation/ignition:latest
        command: ['sh', '-c']
        args:
          - |
            if [ ! -f /persistent-data/gateway.xml_clean ]; then
              echo "First run detected - copying Ignition system files for Backup..."
              cp -r /usr/local/bin/ignition/data/* /persistent-data/
              echo "Backup copy completed!"
            else
              echo "Backup system files already present, skipping copy."
            fi
        volumeMounts:
        - name: backup-data
          mountPath: /persistent-data
      containers:
      - name: ignition-backup
        image: inductiveautomation/ignition:latest
        ports:
        - containerPort: 8088
          name: http
        - containerPort: 8043
          name: https
        - containerPort: 8060
          name: redundancy
        env:
        - name: GATEWAY_ADMIN_PASSWORD
          value: "password"
        - name: IGNITION_EDITION
          value: "standard"
        - name: TZ
          value: "Europe/Paris"
        - name: GATEWAY_REDUNDANCY_ENABLED
          value: "true"
        - name: GATEWAY_REDUNDANCY_ROLE
          value: "backup"
        - name: GATEWAY_REDUNDANCY_MASTER_HOSTNAME
          value: "ignition-master-service.ignition.svc.cluster.local"
        volumeMounts:
        - name: backup-data
          mountPath: /usr/local/bin/ignition/data
        resources:
          requests:
            memory: "512Mi"
            cpu: "500"
          limits:
            memory: "1Gi"
            cpu: "600"
      volumes:
      - name: backup-data
        persistentVolumeClaim:
          claimName: ignition-backup-storage
---
# Service Master Gateway
apiVersion: v1
kind: Service
metadata:
  name: ignition-master-service
  namespace: ignition
spec:
  selector:
    app: ignition-master
  ports:
  - name: http
    port: 8088
    targetPort: 8088
    nodePort: 30088
  - name: https
    port: 8043
    targetPort: 8043
    nodePort: 30043
  - name: redundancy
    port: 8060
    targetPort: 8060
  type: NodePort
---
# Service Backup Gateway
apiVersion: v1
kind: Service
metadata:
  name: ignition-backup-service
  namespace: ignition
spec:
  selector:
    app: ignition-backup
  ports:
  - name: http
    port: 8088
    targetPort: 8088
    nodePort: 30089
  - name: https
    port: 8043
    targetPort: 8043
    nodePort: 30044
  - name: redundancy
    port: 8060
    targetPort: 8060
  type: NodePort